#!/usr/bin/env python3

import argparse
import logging

from opusfilter.autogen_cluster import ThresholdFinder, make_config_yaml

logging.basicConfig(level=logging.INFO)

parser = argparse.ArgumentParser(prog='opusfilter-autogen-cluster')

parser.add_argument('--files', nargs=2, required=True, help='Source and target file of a bitext', metavar=('src_file', 'trg_file'))
parser.add_argument('--langs', nargs=2, required=True, help='Language codes corresponding to the source and target files', metavar=('src_lang', 'trg_lang'))
parser.add_argument('--scripts', nargs=2, help='Alphabetic scripts corresponding to the source and target files. If omitted, CharacterScoreFilter will not be used.', metavar=('src_script', 'trg_script'))
parser.add_argument('--output-file', default='config.yaml', help='Generated config file (default=config.yaml)')
parser.add_argument('--sample-size', default=100000, type=int, help='Number of sentence pairs used for clustering (default=100000)')
parser.add_argument('--work-dir', default='.', help='Location of the source and target files (default=.)')
parser.add_argument('--inter-dir', help='Save intermediate files in this directory. These files are: deduplicated files > files with empty lines and lines longer than 150 words removed > sample files for clustering > scores for the sample > labels from clustering')
parser.add_argument('--graph', action='store_true', help='Show a scatter plot of the clustering and histograms of feature data distributions')
parser.add_argument('--overwrite', action='store_true', help='Overwrite existing config file and intermediate files')

args = parser.parse_args()

cg = ThresholdFinder(**vars(args))
filter_params = cg.find_thresholds()
make_config_yaml(filter_params, args.files, args.output_file, args.work_dir)
